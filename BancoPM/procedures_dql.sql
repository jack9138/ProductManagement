USE PRODUCTMANAGEMENT;

#####################################P_CADASTRO_ESTOQUE###################################################
#Procedure responsavel pelo cadastro de estoque#
DROP PROCEDURE IF EXISTS P_CADASTRO_ESTOQUE
DELIMITER $$
CREATE PROCEDURE P_CADASTRO_ESTOQUE 
#Parametros de entrada#
(IN 
 P_CODPRODUTO INT, 
 P_CODMARCA INT,
 P_CODMODELO INT,
 P_QTDENTRADA INT,
 P_USRIDENTRADA INT, 
 P_DATAENTRADA DATE)

BEGIN
	#Varaivel com que recebe o valor do estoque#
	DECLARE V_VALORTOTALENTRADA DECIMAL (10,2);
    DECLARE V_COUNT INT ;
    DECLARE V_FIMLOOP INT DEFAULT 0;
    
    #Cursor #
	DECLARE C_PRODUTO CURSOR FOR SELECT COUNT(COD_PRODUTO) FROM ESTOQUE WHERE COD_PRODUTO = P_CODPRODUTO;
    
	#Tratamento de erro no cadastro#
	DECLARE EXIT HANDLER FOR SQLEXCEPTION SELECT 'ERRO AO EFETUAR CADASTRO DE ESTOQUE' AS MESSAGE;
    
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET V_FIMLOOP = 1;
		
        OPEN C_PRODUTO; 
			WHILE(V_FIMLOOP != 1)DO
				FETCH C_PRODUTO INTO V_COUNT;
			END WHILE;
            
	#Chamada da Function para inserir valor na variavel V_VALORTOTALENTRADA#
    SELECT F_VALOR_ENTRADA (P_QTDENTRADA, P_CODPRODUTO) AS F_VALORTOTAL INTO V_VALORTOTALENTRADA;
    
    #Caso produto já tenha estoque, atualiza no estoque#
    IF V_COUNT = 1 THEN #Se tiver ja no estoque deve ser atualizado. 
		
			UPDATE ESTOQUE
			SET QTD_ENTRADAPRODUTO = (QTD_ENTRADAPRODUTO + P_QTDENTRADA),
			VALOR_TOTALEST = (VALOR_TOTALEST + V_VALORTOTALENTRADA),
			DATA_ENTRADAES = P_DATAENTRADA
			WHERE COD_PRODUTO = P_CODPRODUTO;
	 
     ELSE IF V_COUNT = 0 THEN #Se for igual 0 significa que não tem cadastrado no estoque
			#Insert dos dados de Estoque#
			 INSERT INTO ESTOQUE(COD_PRODUTO,
								COD_MARCA,
								COD_MODELO,
								QTD_ENTRADAPRODUTO,
								VALOR_TOTALEST,
								USRID_ENTRADA,
								DATA_ENTRADAES) 
								VALUES(P_CODPRODUTO,
									   P_CODMARCA,
									   P_CODMODELO,
									   P_QTDENTRADA,
									   V_VALORTOTALENTRADA,
									   P_USRIDENTRADA,
									   P_DATAENTRADA);
	   END IF;
    END IF;

END$$
DELIMITER ;

SELECT * FROM ESTOQUE WHERE COD_PRODUTO = 2;
#Chamada da procedure CADASTRO_ESTOQUE#
CALL P_CADASTRO_ESTOQUE(2,2,3,100,4,'2021-07-10');

########################################P_SAIDA_ESTOQUE#################################################

#Procedure responsavel pelo registro na tabela saidadeestoque#
DROP PROCEDURE IF EXISTS P_SAIDA_ESTOQUE
DELIMITER $$
CREATE PROCEDURE P_SAIDA_ESTOQUE
#Parametros de entrada#
(IN 
 P_CODPRODUTO INT, 
 P_QTDSAIDA INT,
 P_USRIDSAIDA INT, 
 P_DATASAIDA DATE)

BEGIN
	#Varaivel com que recebe o valor do estoque#
	DECLARE V_VALORTOTALSAIDA DECIMAL (10,2);
    
    #Tratamento de erro no cadastro#
	DECLARE EXIT HANDLER FOR SQLEXCEPTION SELECT 'ERRO AO EFETUAR SAIDA DE ESTOQUE' AS MESSAGE;

	#Chamada da Function para inserir valor na variavel V_VALORTOTALENTRADA#
    SELECT F_VALOR_SAIDA (P_QTDSAIDA,P_CODPRODUTO) AS F_VALORTOTAL INTO V_VALORTOTALSAIDA;
	
			#Insert dos dados de Estoque#
			 INSERT INTO SAIDAESTOQUE(COD_PRODUTO,
									  QTD_SAIDAPRODUTO,
									  VALOR_SAIDAES,
									  USRID_RETIRADA,
									  DATA_SAIDAES) 
									  VALUES(P_CODPRODUTO,											
											 P_QTDSAIDA,
											 V_VALORTOTALSAIDA,
											 P_USRIDSAIDA,
											 P_DATASAIDA);
END$$
DELIMITER ;

#Chamada da procedure SAIDA_ESTOQUE#
CALL P_SAIDA_ESTOQUE(18,50,2,'2021-07-10');
SELECT * FROM SAIDAESTOQUE;

#####################################P_RELATORIO_ENTESTOQUE#############################################
#Procedure usado para gerar relatorio de estoque#
DROP PROCEDURE IF EXISTS P_RELATORIO_ENTESTOQUE
DELIMITER $$
CREATE PROCEDURE P_RELATORIO_ENTESTOQUE
#Parametros de entrada#
(IN P_DATAINICIOENT DATE,
 IN P_DATAFIMENT DATE,
 IN P_LIMITREG INT,
 OUT P_NOMEPRODUTO VARCHAR(100),
	 P_NOMEMARCA VARCHAR(100),
     P_NOMEMODELO VARCHAR (100),
     P_PRECOUNID DECIMAL,
     P_QTDENTRADAPRODUTO INT,
     P_VALORTOTALENT DECIMAL,
     P_DATAENTRADA DATE)
BEGIN

	#Tratamento de erro no realtorio#
	DECLARE EXIT HANDLER FOR SQLEXCEPTION SELECT 'ERRO AO EXECUTAR PROCEDURE' AS MESSAGE;
    
    IF P_DATAINICIOENT IS NOT NULL AND P_DATAFIMENT IS NOT NULL  THEN
		SELECT  PROD.PROD_NOME,MA.NOME_MARCA, MO.NOME_MODELO,PR.PREC_UNIDADE,ES.QTD_ENTRADAPRODUTO,ES.VALOR_TOTALEST,DATE_FORMAT(ES.DATA_ENTRADAES, '%d/%m/%y') DATA_ENTRADA
				FROM ESTOQUE AS ES 
				INNER JOIN PRODUTO AS PROD
				ON ES.COD_PRODUTO = PROD.PROD_ID 
				INNER JOIN PRECOPRODUTO AS PR
				ON PR.COD_PRODUTO = PROD.PROD_ID 
				INNER JOIN MARCA AS MA
				ON MA.ID_MARCA = PROD.PROD_MARCA
				INNER JOIN MODELO AS MO
				ON MO.ID_MODELO = PROD.PROD_MODELO 
				WHERE PR.PREC_STATUS = 'A' 
				AND ES.DATA_ENTRADAES BETWEEN DATE(P_DATAINICIOENT)
				AND DATE(P_DATAFIMENT)
				ORDER BY ES.DATA_ENTRADAES ASC  #ORDENADO POR DATA CRESCENTE
                LIMIT  P_LIMITREG; 
	END IF; 
	 
END$$
DELIMITER ;

#Chamada da procedure RELATORIO_ENTESTOQUE#
CALL P_RELATORIO_ENTESTOQUE('2021-01-01','2021-05-01',20,@P_NOMEPRODUTO,@P_NOMEMARCA,@P_NOMEMODELO,@P_PRECOUNID,@P_QTDENTRADAPRODUTO,@P_VALORTOTALENT,@P_DATAENTRADA);


#######################################P_RELATORIO_SAIESTOQUE#######################################################
#Procedure utilizada para gerar relatorio de saidaestoque#
DROP PROCEDURE IF EXISTS P_RELATORIO_SAIESTOQUE
DELIMITER $$
CREATE PROCEDURE P_RELATORIO_SAIESTOQUE
#Parametros de entrada#
(IN P_DATAINICIOSAI DATE,
 IN P_DATAFIMSAI DATE,
 IN P_LIMITREG INT,
 OUT P_NOMEPRODUTO VARCHAR(100),
	 P_NOMEMARCA VARCHAR(100),
     P_NOMEMODELO VARCHAR (100),
     P_PRECOUNID DECIMAL,
     P_QTDSAIDAPRODUTO INT,
     P_VALORTOTALSAI DECIMAL,
     P_DATASAIDA DATE)
BEGIN
	#Tratamento de erro no relatorio#
	DECLARE EXIT HANDLER FOR SQLEXCEPTION SELECT 'ERRO AO EXECUTAR PROCEDURE' AS MESSAGE;
    
    IF P_DATAINICIOSAI IS NOT NULL AND P_DATAFIMSAI IS NOT NULL  THEN
		SELECT  PROD.PROD_NOME,MA.NOME_MARCA, MO.NOME_MODELO,PR.PREC_UNIDADE,SA.QTD_SAIDAPRODUTO QTD_SAIDAPRODUTO,SA.VALOR_SAIDAES VALOR_TOTAL_SAIDA,DATE_FORMAT(SA.DATA_SAIDAES, '%d/%m/%y') DATA_SAIDA
				FROM SAIDAESTOQUE AS SA 
				RIGHT JOIN PRODUTO AS PROD
				ON SA.COD_PRODUTO = PROD.PROD_ID 
				RIGHT JOIN PRECOPRODUTO AS PR
				ON PR.COD_PRODUTO = PROD.PROD_ID 
				RIGHT JOIN MARCA AS MA
				ON MA.ID_MARCA = PROD.PROD_MARCA
				RIGHT JOIN MODELO AS MO
				ON MO.ID_MODELO = PROD.PROD_MODELO 
				WHERE PR.PREC_STATUS = 'A' 
				AND SA.DATA_SAIDAES BETWEEN DATE(P_DATAINICIOSAI)
				AND DATE(P_DATAFIMSAI)
				ORDER BY SA.DATA_SAIDAES ASC #ORDENADO POR DATA CRESCENTE 
                LIMIT  P_LIMITREG; 
	END IF; 
END$$
DELIMITER ;

#Chamada da procedure REALTORIO_SAIESTOQUE#
CALL P_RELATORIO_SAIESTOQUE('2021-01-01','2021-05-01',20,@P_NOMEPRODUTO,@P_NOMEMARCA,@P_NOMEMODELO,@P_PRECOUNID,@P_QTDSAIDAPRODUTO,@P_VALORTOTALSAI,@P_DATASAIDA);


##########################################P_RELATORIO_COMPARATIVO#################################################
#Procedure usado para gerar relatorio comparativo#
DROP PROCEDURE IF EXISTS P_RELATORIO_COMPARATIVO #Usar union
DELIMITER $$
CREATE PROCEDURE P_RELATORIO_COMPARATIVO
#Parametros de entrada#
(IN P_DATAINICIOSAI DATE,
 IN P_DATAFIMSAI DATE,
 IN P_LIMITREG INT,
 OUT P_NOMEPRODUTO VARCHAR(100),
	 P_NOMEMARCA VARCHAR(100),
     P_NOMEMODELO VARCHAR (100),
     P_PRECOUNID DECIMAL,
     P_QTDENTRADAPRODUTO INT,
     P_QTDSAIDAPRODUTO INT,
     P_VALORTOTALENT DECIMAL,
     P_VALORTOTALSAI DECIMAL,
     P_DATAENTRADA DATE,
     P_DATASAIDA DATE)
BEGIN
	#Tratamento de erro no relatorio#
    DECLARE EXIT HANDLER FOR SQLEXCEPTION SELECT 'ERRO AO EXECUTAR PROCEDURE' AS MESSAGE;
    
    IF P_DATAINICIOSAI IS NOT NULL AND P_DATAFIMSAI IS NOT NULL THEN
		SELECT  PROD.PROD_NOME,MA.NOME_MARCA, MO.NOME_MODELO,PR.PREC_UNIDADE,ES.QTD_ENTRADAPRODUTO QTD_ENTRADA, 
                SA.QTD_SAIDAPRODUTO QTD_SAIDAPRODUTO,ES.VALOR_TOTALEST  VALOR_TOTAL_ENTRADA,SA.VALOR_SAIDAES VALOR_TOTAL_SAIDA ,
                DATE_FORMAT(ES.DATA_ENTRADAES, '%d/%m/%y') DATA_ENTRADA ,DATE_FORMAT(SA.DATA_SAIDAES, '%d/%m/%y') DATA_SAIDA
					FROM ESTOQUE AS ES 
					INNER JOIN PRODUTO AS PROD
					ON ES.COD_PRODUTO = PROD.PROD_ID 
					INNER JOIN PRECOPRODUTO AS PR
					ON PR.COD_PRODUTO = PROD.PROD_ID 
					INNER JOIN MARCA AS MA
					ON MA.ID_MARCA = PROD.PROD_MARCA
					INNER JOIN MODELO AS MO
					ON MO.ID_MODELO = PROD.PROD_MODELO 
					INNER JOIN SAIDAESTOQUE AS SA
					ON ES.COD_PRODUTO = SA.COD_PRODUTO
					WHERE PR.PREC_STATUS = 'A' 
					AND ES.DATA_ENTRADAES BETWEEN DATE(P_DATAINICIOSAI)
					AND DATE(P_DATAFIMSAI)
					AND SA.DATA_SAIDAES BETWEEN DATE(P_DATAINICIOSAI)
					AND DATE(P_DATAFIMSAI)
					GROUP BY PROD.PROD_NOME,
							 MA.NOME_MARCA, 
							 MO.NOME_MODELO,
							 PR.PREC_UNIDADE
					ORDER BY ES.DATA_ENTRADAES ASC  #ORDENADO POR DATA CRESCENTE
					LIMIT  P_LIMITREG;
    END IF;
  
END$$
DELIMITER ;

#Chamada da procedure P_RELATORIO_COMPARATIVO#
CALL P_RELATORIO_COMPARATIVO('2021-01-01','2021-05-01',20,@P_NOMEPRODUTO,@P_NOMEMARCA ,@P_NOMEMODELO,@P_PRECOUNID ,@P_QTDENTRADAPRODUTO ,@P_QTDSAIDAPRODUTO,@P_VALORTOTALENT,@P_VALORTOTALSAI,@P_DATAENTRADA,@P_DATASAIDA);

###########################################################################################
